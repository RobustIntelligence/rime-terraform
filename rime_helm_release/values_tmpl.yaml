rime:
  domain: "${domain}"
  verbose: ${verbose}
%{ if length(ip_allowlist) > 0 ~}
  ipAllowlist:
%{ for ip in ip_allowlist ~}
  - ${ip}
%{ endfor ~}
%{ endif ~}
  enableApiKeyAuth: ${enable_api_key_auth}
  separateModelTestingGroup: ${separate_model_testing_group}

userpilotFlow: ${user_pilot_flow}
rimeJwt: ${rime_jwt}

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 10
  targetMemoryUtilizationPercentage: 80
  targetCPUUtilizationPercentage: 80
replicaCount: 3 #Ignored if autoscaling enabled.

resources:
  requests:
    memory: "100Mi"
    cpu: "100m"
  limits:
    memory: "500Mi"
    cpu: "500m"

modelTestResources:
  requests:
    memory: "4000Mi"
    cpu: "1500m"

backendImage:
  name: "${docker_registry}/robustintelligencehq/rime-backend:${version}"
  pullPolicy: "${pull_policy}"

frontendImage:
  name: "${docker_registry}/robustintelligencehq/rime-frontend:${version}"
  pullPolicy: "${pull_policy}"

modelTestImage:
  # This is the rime-engine configuration for the staging environment.
  name: "${docker_registry}/robustintelligencehq/rime-testing-engine-dev:${version}"
  pullPolicy: "${pull_policy}"

firewall:
  enabled: true

# TODO(blaine): Allow image pull secrets to be customized to the image.
imagePullSecrets:
  - name: ${docker_secret_name}

mongodb:
  replicaCount: 1
  image:
    registry: "${docker_registry}"
    repository: "robustintelligencehq/mongodb"
    tag: "5.0.9-debian-11-r7"
    pullSecrets:
      - ${docker_secret_name}
  persistence:
    storageClass: "${storage_class_name}"
    size: "${mongo_db_size}"

# The following overrides are AWS specific.
imageRegistry:
  create: ${image_registry_config.enable}
%{ if image_registry_config.enable ~}
  config:
    imageRegistry:
      ecr:
        registryID: "${image_registry_config.registry_id}"
        repositoryPrefix: "${image_registry_config.repo_base_name}"
  dockerSecretName: "${docker_secret_name}"
  # Specification of the container image used for running the image builder jobs.
  image:
    name: "${docker_registry}/robustintelligencehq/rime-image-builder:${version}"
    pullPolicy: "${pull_policy}"
  rbac:
    serverAccount:
      # Annotations required to associate the image registry server account
      # with the AWS IAM role used to create, access and modify RIME's ECR repositories.
      annotations: {
        eks.amazonaws.com/role-arn: ${image_registry_config.repo_manager_role_arn}
      }
    jobAccount:
      # Annotations required to associate the image builder job account
      # with the AWS IAM role used to push and pull images to RIME's ECR repositories.
      annotations: {
        eks.amazonaws.com/role-arn: ${image_registry_config.image_builder_role_arn}
      }
%{ endif ~}

blobStore:
  rbac:
    create: ${blob_store_config.enable}
    blobStoreAccount:
      create: ${blob_store_config.enable}
      # Account used by services that need access to blob storage.
      # This account has special priveleges to read and write to S3 bucket used for blob storage.
      annotations: {
        eks.amazonaws.com/role-arn: ${blob_store_config.role_arn}
      }
  # The bucket name of the S3 bucket used as the blob storage.
  storageBucketName: ${blob_store_config.s3_bucket_name}
  endpoint: "s3.amazonaws.com"
  type: "s3"

ingress-nginx:
  imagePullSecrets:
    - name: ${docker_secret_name}
  controller:
    image:
      registry: "${docker_registry}"
      image: "robustintelligencehq/ingress-nginx-controller"
      tag: "v1.3.0"
      digest: "sha256:067673df26a65ec5c2d5b30f25db869bad4d7d391fc81882250134577e581ef0"
    scope:
      enabled: true
      namespace: ${namespace}
    service:
      annotations:
        service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "${acm_cert_arn}"
        service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
        service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "3600"
        service.beta.kubernetes.io/aws-load-balancer-type: "external"
        service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
        service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "ip"
        service.beta.kubernetes.io/aws-load-balancer-scheme: "${lb_type}"
        ${lb_tags}
  %{ if length(ip_allowlist) > 0 ~}
        service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: preserve_client_ip.enabled=true
  %{ endif ~}

kong:
  image:
    repository: "${docker_registry}/robustintelligencehq/kong"
    tag: "2.8"
    pullSecrets:
      - ${docker_secret_name}
  ingressController:
    image:
      repository: "${docker_registry}/robustintelligencehq/kong-kubernetes-ingress-controller"
      tag: "2.2"
    watchNamespaces:
      - ${namespace}
    ingressClass: kong-${namespace}
  proxy:
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "${acm_cert_arn}"
      service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "kong-proxy-tls"
      service.beta.kubernetes.io/aws-load-balancer-type: "external"
      service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "*"
      service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "ip"
      service.beta.kubernetes.io/aws-load-balancer-scheme: "${lb_type}"
      service.beta.kubernetes.io/aws-load-balancer-alpn-policy: "HTTP2Preferred"
      ${lb_tags}
  %{ if length(ip_allowlist) > 0 ~}
      service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: preserve_client_ip.enabled=true
  %{ endif ~}

redis:
  image:
    registry: "${docker_registry}"
    repository: "robustintelligencehq/redis"
    tag: "7.0.4-debian-11-r4"
    pullSecrets:
      - ${docker_secret_name}
  master:
    persistence:
      storageClass: "${storage_class_name}"

datasetManager:
  useFileUploadService: ${blob_store_config.enable}

vault:
  global:
    imagePullSecrets:
      - name: ${docker_secret_name}
  injector:
    image:
      registry: "docker.io"
      repository: "robustintelligencehq/vault-k8s"
      tag: "v1.0"
  server:
    image:
      registry: "docker.io"
      repository: "robustintelligencehq/vault"
      tag: "v1.11.3"
    ha:
      raft:
        config: |
          listener "tcp" {
            address = "[::]:8200"
            cluster_address = "[::]:8201"
            tls_disable = true
          }
          storage "raft" {
            path = "/vault/data"
            retry_join {
              leader_api_addr = "http://${release_name}-vault-0.${release_name}-vault-internal:8200"
            }
          }
          service_registration "kubernetes" { }
